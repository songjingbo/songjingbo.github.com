<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Vneptune's paper]]></title>
  <link href="http://songjingbo.github.com/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://songjingbo.github.com/"/>
  <updated>2014-03-12T19:59:52+08:00</updated>
  <id>http://songjingbo.github.com/</id>
  <author>
    <name><![CDATA[vneptune]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PHP array]]></title>
    <link href="http://songjingbo.github.com/blog/php-array/"/>
    <updated>2013-04-22T01:37:00+08:00</updated>
    <id>http://songjingbo.github.com/blog/php-array</id>
    <content type="html"><![CDATA[<h1 id="toc_0">2. PHP hashtable</h1>

<h2 id="toc_1">2.1 hashtable之hash函数</h2>

<p>PHP hashtable的hash函数如下:</p>

<!--more-->

<p>``` c hash func
    static inline ulong zend_inline_hash_func(const char *arKey, uint nKeyLength )
    {
        register ulong hash = 5381;</p>
<div class="highlight"><pre><code class="text">    /* variant with the hash unrolled eight times */
    for (; nKeyLength &gt;= 8; nKeyLength -= 8 ) {
        hash = (( hash &lt;&lt; 5) + hash) + *arKey++;
        hash = (( hash &lt;&lt; 5) + hash) + *arKey++;
        hash = (( hash &lt;&lt; 5) + hash) + *arKey++;
        hash = (( hash &lt;&lt; 5) + hash) + *arKey++;
        hash = (( hash &lt;&lt; 5) + hash) + *arKey++;
        hash = (( hash &lt;&lt; 5) + hash) + *arKey++;
        hash = (( hash &lt;&lt; 5) + hash) + *arKey++;
        hash = (( hash &lt;&lt; 5) + hash) + *arKey++;
    }
    switch ( nKeyLength) {
        case 7 : hash = ((hash &lt;&lt; 5 ) + hash) + * arKey++; /* fallthrough… */
        case 6 : hash = ((hash &lt;&lt; 5 ) + hash) + * arKey++; /* fallthrough… */
        case 5 : hash = ((hash &lt;&lt; 5 ) + hash) + * arKey++; /* fallthrough… */
        case 4 : hash = ((hash &lt;&lt; 5 ) + hash) + * arKey++; /* fallthrough… */
        case 3 : hash = ((hash &lt;&lt; 5 ) + hash) + * arKey++; /* fallthrough… */
        case 2 : hash = ((hash &lt;&lt; 5 ) + hash) + * arKey++; /* fallthrough… */
        case 1 : hash = ((hash &lt;&lt; 5 ) + hash) + * arKey++; break;
        case 0 : break ;
                 EMPTY_SWITCH_DEFAULT_CASE ()
    }
    return hash;
}
</code></pre></div><div class="highlight"><pre><code class="text">## 2.2 hashtable之定义

对于array类型的zval，记录指向一个Hashtable的指针

``` c get hashtable 
    typedef union _zvalue_value {
        long lval;                  /* long value */
        double dval;                /* double value */
        struct {
            char *val;
            int len;
        } str;
        HashTable *ht;              /* hash table value */
        zend_object_value obj;
    } zvalue_value;
    #define Z_ARRVAL(zval)          (zval).value.ht   //HashTable *
</code></pre></div>
<p>Hashtable的定义在如下(PHP 5.2 5.4保存一致)</p>

<p><code>c zval hashtable defination
    typedef struct _hashtable {
        uint nTableSize;  // 初始化为8 hash表元素数目 2的n次方,nNumOfElements达到后会加班
        uint nTableMask;  // arBuckets数组大小，初始化为0 表示arBuckets未初始化，初始化以后是nTableSize-1    
        uint nNumOfElements;   // 初始化为0 没插入一个元素+1，超出nTableSize时resize，rehash
        ulong nNextFreeElement; // 0 long型key的下标，递增
        Bucket *pInternalPointer;   // NULL 用于遍历
        Bucket *pListHead; // null 全局链表头 每次插入最后， rehash的时候不变
        Bucket *pListTail; // null 全局链表尾 每次插入尾部
        Bucket **arBuckets; // &amp;(Bucket * == NULL) 是pemallc的
        dtor_func_t pDestructor;   //void _zval_ptr_dtor(zval *存在则处理pData的释放
        zend_bool persistent; // 0  Bucket数组和pData指向的zval*类型的指针 是pemalloc还是emalloc
        unsigned char nApplyCount; // 0 超过三层，会报错
        zend_bool bApplyProtection; // 1  递归保护
    #if ZEND_DEBUG
        int inconsistent;
    #endif
    } HashTable;
</code></p>

<p>Hashtable中每一个item保存在Bucket结构中，注意这里PHP维护了2个双向链表</p>

<p><code>c bucket defination
    typedef struct bucket {
        ulong h ;       // hash值，整形下标
        uint nKeyLength ;  // arKey的长度，包括\0 0表示为整型index，此时arkey=NULL h为整型的key
        void * pData;  // 指向保存数据的指针 直接指向pDataPtr(zval **)
        void * pDataPtr;  // 保存的数据就是指针大小，那么指针数据直接放在这里(zval * 类型数据)
        struct bucket *pListNext ;  // 全局链表 每次插入最后
        struct bucket *pListLast ;   // 全局链表
        struct bucket *pNext ;  // hash冲突链表，每次插入表头，rehash时重新计算
        struct bucket *pLast ;
        const char *arKey ;   // key 实际后接string或指向全局列表
    } Bucket ;
</code></p>

<h2 id="toc_2">2.3 hashtable之初始化</h2>

<p>通常，使用array_init对zval* 进行初始化，设置size可以指定tablesize为不小于size的2的指数幂</p>

<p>``` c hashtable init
    #define array_init (arg)              _array_init((arg), 0 ZEND_FILE_LINE_CC)
    #define array_init_size (arg, size) _array_init((arg), (size) ZEND_FILE_LINE_CC)</p>
<div class="highlight"><pre><code class="text">ZEND_API int _array_init(zval *arg, uint size ZEND_FILE_LINE_DC)
{
    ALLOC_HASHTABLE_REL(Z_ARRVAL_P(arg)); // emalloc Hashtable
    _zend_hash_init(Z_ARRVAL_P(arg), size, NULL, ZVAL_PTR_DTOR, 0 ZEND_FILE_LINE_RELAY_CC);
    Z_TYPE_P(arg) = IS_ARRAY;  // 设置zval类型
    return SUCCESS;
}

#define ALLOC_HASHTABLE_REL(ht) \
    (ht) = (HashTable *) emalloc_rel(sizeof(HashTable))

#define zend_hash_init (ht, nSize, pHashFunction, pDestructor, persistent) \
    _zend_hash_init((ht), (nSize), (pHashFunction), (pDestructor), (persistent) ZEND_FILE_LINE_CC)
</code></pre></div><div class="highlight"><pre><code class="text">可见，使用array\_init初始化会进行hashtable的空间分配及初始化，并将zval类型设置为array，其中hash表结构初始化如下:


``` c zend_hash_init
    ZEND_API int _zend_hash_init(HashTable *ht , uint nSize, hash_func_t pHashFunction, dtor_func_t pDestructor , zend_bool persistent ZEND_FILE_LINE_DC )
    {
        uint i = 3;

        SET_INCONSISTENT(HT_OK );

        if ( nSize &gt;= 0×80000000) {
            /* prevent overflow */
            ht -&gt;nTableSize = 0×80000000 ;
        } else {
            while (( 1U &lt;&lt; i) &lt; nSize) {
                i ++;
            }
            ht -&gt;nTableSize = 1 &lt;&lt; i ;
        }

        ht -&gt;nTableMask = 0 ;  /* 0 means that ht-&gt;arBuckets is uninitialized */
        ht -&gt;pDestructor = pDestructor;
        ht -&gt;arBuckets = ( Bucket**)&amp;uninitialized_bucket ;
        ht -&gt;pListHead = NULL;
        ht -&gt;pListTail = NULL;
        ht -&gt;nNumOfElements = 0 ;
        ht -&gt;nNextFreeElement = 0 ;
        ht -&gt;pInternalPointer = NULL;
        ht -&gt;persistent = persistent;
        ht -&gt;nApplyCount = 0 ;
        ht -&gt;bApplyProtection = 1 ;
        return SUCCESS ;
    }
</code></pre></div>
<p>其中hashtable元素的析构函数pDestructor为一个 void (void *)的函数指针, 这里使用的是ZVAL_PTR_DTOR;
函数参数实际上为zval** 类型, 内部使用时需要进行强转</p>

<p>``` c hashtable destructor
    #define ZVAL_PTR_DTOR ( void (*)(void *)) zval_ptr_dtor_wrapper
    #define zval_ptr_dtor_wrapper _zval_ptr_dtor</p>
<div class="highlight"><pre><code class="text">ZEND_API void _zval_ptr_dtor(zval **zval_ptr ZEND_FILE_LINE_DC)
{
#if DEBUG_ZEND&gt;=2
    printf(“Reducing refcount for %x (%x): %d-&gt;%d\n”, *zval_ptr, zval_ptr, Z_REFCOUNT_PP(zval_ptr), Z_REFCOUNT_PP(zval_ptr) – 1);
#endif
    Z_DELREF_PP(zval_ptr);              // zval* 指向的zval的引用计数refcount--
    if (Z_REFCOUNT_PP(zval_ptr) == 0) { // 引用计数为0, 说明需要释放该变量

        TSRMLS_FETCH();
        if (*zval_ptr != &amp;EG(uninitialized_zval)) {
            GC_REMOVE_ZVAL_FROM_BUFFER(*zval_ptr);
            zval_dtor(*zval_ptr);    // 根据zval类型进行析构, 如果是hashtable，则调用全部成员的析构并释放hashtable的空间
            efree_rel(*zval_ptr);    // 释放zval结构本身的空间
        }
    } else {
        TSRMLS_FETCH();

        if (Z_REFCOUNT_PP(zval_ptr) == 1) {  // 引用计数到1时, 重置is_ref
            Z_UNSET_ISREF_PP(zval_ptr);
        }

        GC_ZVAL_CHECK_POSSIBLE_ROOT(*zval_ptr);  // array或object释放资源
    }
}
</code></pre></div><div class="highlight"><pre><code class="text">## 2.4 Hashtable之插入

处理Hashtable插入操作的api如下(5.2.4增加了 char* key的const约束, 定义更加规范, 可以在zend\_API.h zend\_hash.h看到这些定义)

``` c hashtable insert (key is str)
    #define add_assoc_long (__arg, __key, __n) add_assoc_long_ex(__arg, __key, strlen(__key)+1, __n)
    #define add_assoc_null (__arg, __key) add_assoc_null_ex(__arg, __key, strlen(__key) + 1)
    #define add_assoc_bool (__arg, __key, __b) add_assoc_bool_ex(__arg, __key, strlen(__key)+1, __b)
    #define add_assoc_resource (__arg, __key, __r) add_assoc_resource_ex(__arg, __key, strlen(__key)+1, __r)
    #define add_assoc_double (__arg, __key, __d) add_assoc_double_ex(__arg, __key, strlen(__key)+1, __d)
    #define add_assoc_string (__arg, __key, __str, __duplicate) add_assoc_string_ex(__arg, __key, strlen(__key)+1, __str, __duplicate)
    #define add_assoc_stringl (__arg, __key, __str, __length, __duplicate) add_assoc_stringl_ex(__arg, __key, strlen(__key)+1, __str, __length, __duplicate)
    #define add_assoc_zval (__arg, __key, __value) add_assoc_zval_ex(__arg, __key, strlen(__key)+1, __value)

    // 类型参考这些
    ZEND_API int add_assoc_long_ex(zval *arg , const char *key, uint key_len, long n );
    ZEND_API int add_assoc_null_ex(zval *arg , const char *key, uint key_len);
    ZEND_API int add_assoc_bool_ex(zval *arg , const char *key, uint key_len, int b );
    ZEND_API int add_assoc_resource_ex(zval *arg , const char *key, uint key_len , int r);
    ZEND_API int add_assoc_double_ex(zval *arg , const char *key, uint key_len, double d );
    ZEND_API int add_assoc_string_ex(zval *arg , const char *key, uint key_len, char *str, int duplicate );
    ZEND_API int add_assoc_stringl_ex(zval *arg , const char *key, uint key_len , char *str , uint length, int duplicate);
    ZEND_API int add_assoc_zval_ex(zval *arg , const char *key, uint key_len, zval *value);
</code></pre></div>
<p>上面是插入string类型key，而如果需要插入long型key的数据，可以使用这些</p>

<p>``` c hashtable insert (key is long)
    ZEND_API int add_index_long(zval *arg , ulong idx, long n);
    ZEND_API int add_index_null(zval *arg , ulong idx);
    ZEND_API int add_index_bool(zval *arg , ulong idx, int b);
    ZEND_API int add_index_resource( zval * arg, ulong idx, int r );
    ZEND_API int add_index_double(zval *arg , ulong idx, double d);
    ZEND_API int add_index_string(zval *arg , ulong idx, const char * str, int duplicate);
    ZEND_API int add_index_stringl(zval *arg , ulong idx, const char * str, uint length, int duplicate );
    ZEND_API int add_index_zval(zval *arg , ulong index, zval *value);</p>
<div class="highlight"><pre><code class="text">ZEND_API int add_next_index_long(zval *arg , long n);
ZEND_API int add_next_index_null(zval *arg );
ZEND_API int add_next_index_bool(zval *arg , int b);
ZEND_API int add_next_index_resource(zval *arg , int r);
ZEND_API int add_next_index_double(zval *arg , double d);
ZEND_API int add_next_index_string(zval *arg , const char *str, int duplicate );
ZEND_API int add_next_index_stringl(zval *arg , const char *str, uint length , int duplicate);
ZEND_API int add_next_index_zval(zval *arg , zval *value );
</code></pre></div><div class="highlight"><pre><code class="text">这里，以add\_assoc\_string\_ex为例, 进一步看下在hashtable中插入数据的过程(zend\_API.h)

``` c hashtable add_assoc_string_ex
    ZEND_API int add_assoc_string_ex(zval *arg , const char *key, uint key_len, char *str, int duplicate )
    {
        zval * tmp;

        MAKE_STD_ZVAL(tmp );
        ZVAL_STRING(tmp , str, duplicate);  // 非0的话，会进行memcpy

        return zend_symtable_update (Z_ARRVAL_P( arg), key , key_len, ( void *) &amp;tmp , sizeof (zval *), NULL);
    }

    static inline int zend_symtable_update(HashTable *ht , const char * arKey, uint nKeyLength, void *pData, uint nDataSize , void ** pDest)                         \
    {
        ZEND_HANDLE_NUMERIC(arKey , nKeyLength, zend_hash_index_update(ht , idx, pData, nDataSize , pDest));
        // index update  nKeyLength包括 \0 需要是strlen+1
        return zend_hash_update (ht, arKey, nKeyLength , pData, nDataSize, pDest);
    }
</code></pre></div>
<p>可见，void*的pData其实是zval**, ndatasize这里就是指针大小(zend_hash.h).
如果是数字类型，这里要注意ZEND_HANDLE_NUMERIC，这个宏处理了key为数值内容的字符串时
注意，结尾非空，有前导0，超过long11or20,且有符号long未溢出，使用zend_hash_index_update </p>
<div class="highlight"><pre><code class="c">    <span class="err">#</span><span class="n">define</span> <span class="n">ZEND_HANDLE_NUMERIC</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">func</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span>         \
        <span class="n">ulong</span> <span class="n">idx</span><span class="p">;</span>                                               \
        <span class="n">ZEND_HANDLE_NUMERIC_EX</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="k">return</span> <span class="n">func</span><span class="p">);</span>   <span class="err">\</span>         <span class="c1">//注意如果是整型这里直接返回了</span>
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">ZEND_HANDLE_NUMERIC_EX</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">idx</span><span class="p">,</span> <span class="n">func</span><span class="p">)</span> <span class="k">do</span> <span class="p">{</span>                 \
        <span class="k">register</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>                                         \
                                                                                \
        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">tmp</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span> <span class="p">{</span>                                                      \
            <span class="n">tmp</span><span class="o">++</span><span class="p">;</span>                                                              \
        <span class="p">}</span>                                                                       \
        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">tmp</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* possibly a numeric index */</span>        \
            <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">end</span> <span class="o">=</span> <span class="n">key</span> <span class="o">+</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>                                 \
                                                                                \
            <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">end</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="cm">/* not a null terminated string */</span>               \
             <span class="o">||</span> <span class="p">(</span><span class="o">*</span><span class="n">tmp</span> <span class="o">==</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">length</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="cm">/* numbers with leading zeros */</span>    \
             <span class="o">||</span> <span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">tmp</span> <span class="o">&gt;</span> <span class="n">MAX_LENGTH_OF_LONG</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="cm">/* number too long */</span>      \
             <span class="o">||</span> <span class="p">(</span><span class="n">SIZEOF_LONG</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span>                                            \
                 <span class="n">end</span> <span class="o">-</span> <span class="n">tmp</span> <span class="o">==</span> <span class="n">MAX_LENGTH_OF_LONG</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span>                         \
                 <span class="o">*</span><span class="n">tmp</span> <span class="o">&gt;</span> <span class="sc">&#39;2&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="cm">/* overflow */</span>                                  \
                <span class="k">break</span><span class="p">;</span>                                                          \
            <span class="p">}</span>                                                                   \
            <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">tmp</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>                                                 \
            <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="n">tmp</span> <span class="o">!=</span> <span class="n">end</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span> <span class="p">{</span>                \
                <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="o">*</span><span class="n">tmp</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>                                \
            <span class="p">}</span>                                                                   \
            <span class="k">if</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">==</span> <span class="n">end</span><span class="p">)</span> <span class="p">{</span>                                                   \
                <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">key</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span> <span class="p">{</span>                                              \
                    <span class="k">if</span> <span class="p">(</span><span class="n">idx</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;</span> <span class="n">LONG_MAX</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* overflow */</span>                      \
                        <span class="k">break</span><span class="p">;</span>                                                  \
                    <span class="p">}</span>                                                           \
                    <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulong</span><span class="p">)(</span><span class="o">-</span><span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">idx</span><span class="p">);</span>                                  \
                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="o">&gt;</span> <span class="n">LONG_MAX</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* overflow */</span>                     \
                    <span class="k">break</span><span class="p">;</span>                                                      \
                <span class="p">}</span>                                                               \
                <span class="n">func</span><span class="p">;</span>                                                           \
            <span class="p">}</span>                                                                   \
        <span class="p">}</span>                                                                       \
    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div>
<p>hashtable long型key的插入更新接的过程口</p>

<p>``` c hashtable update(key is long)
    #define zend_hash_index_update (ht, h, pData, nDataSize, pDest) \
        _zend_hash_index_update_or_next_insert(ht, h, pData, nDataSize, pDest, HASH_UPDATE ZEND_FILE_LINE_CC)</p>
<div class="highlight"><pre><code class="text">ZEND_API int _zend_hash_index_update_or_next_insert(HashTable *ht, ulong h, void *pData, uint nDataSize, void **pDest, int flag ZEND_FILE_LINE_DC)
{
    uint nIndex;
    Bucket *p;
#ifdef ZEND_SIGNALS
    TSRMLS_FETCH();
#endif
    IS_CONSISTENT(ht);
    CHECK_INIT(ht);  // 检查bucket是否分配

    if (flag &amp; HASH_NEXT_INSERT) {   // 对插入的情况，h为下一个
        h = ht-&gt;nNextFreeElement;
    }
    nIndex = h &amp; ht-&gt;nTableMask;  // 更新的话 h为之前string转换后的long

    p = ht-&gt;arBuckets[nIndex];
    while (p != NULL) {   // 该bucket非空，同一个key，如果是插入则失败，此处是更新          if ((p-&gt;nKeyLength == 0) &amp;&amp; (p-&gt;h == h)) {
        if (flag &amp; HASH_NEXT_INSERT || flag &amp; HASH_ADD) {
            return FAILURE;
        }
        HANDLE_BLOCK_INTERRUPTIONS();
#if ZEND_DEBUG
        if (p-&gt;pData == pData) {
            ZEND_PUTS(“Fatal error in zend_hash_index_update: p-&gt;pData == pData\n”);
            HANDLE_UNBLOCK_INTERRUPTIONS();
            return FAILURE;
        }
#endif
        if (ht-&gt;pDestructor) {
            ht-&gt;pDestructor(p-&gt;pData);
        }
        UPDATE_DATA(ht, p, pData, nDataSize);
        HANDLE_UNBLOCK_INTERRUPTIONS();
        if ((long)h &gt;= (long)ht-&gt;nNextFreeElement) { // nextfreeelement非递减，到long_max终止
            ht-&gt;nNextFreeElement = h &lt; LONG_MAX ? h + 1 : LONG_MAX;
        }
        if (pDest) {
            *pDest = p-&gt;pData;
        }
        return SUCCESS;
    }
    p = p-&gt;pNext;
    }
    p = (Bucket *) pemalloc_rel(sizeof(Bucket), ht-&gt;persistent);
    if (!p) {
        return FAILURE;
    }
    p-&gt;arKey = NULL;  // 整型，keylen标记为0，h即为该数字
    p-&gt;nKeyLength = 0; /* Numeric indices are marked by making the nKeyLength == 0 */
    p-&gt;h = h;
    INIT_DATA(ht, p, pData, nDataSize);
    if (pDest) {
        *pDest = p-&gt;pData;
    }

    CONNECT_TO_BUCKET_DLLIST(p, ht-&gt;arBuckets[nIndex]);  // 插入bucket链表头

    HANDLE_BLOCK_INTERRUPTIONS();
    ht-&gt;arBuckets[nIndex] = p;
    CONNECT_TO_GLOBAL_DLLIST(p, ht);      // 插入global链表尾部
    HANDLE_UNBLOCK_INTERRUPTIONS();

    if ((long)h &gt;= (long)ht-&gt;nNextFreeElement) {
        ht-&gt;nNextFreeElement = h &lt; LONG_MAX ? h + 1 : LONG_MAX;
    }
    ht-&gt;nNumOfElements++;
    ZEND_HASH_IF_FULL_DO_RESIZE(ht);
    return SUCCESS;
}
</code></pre></div><div class="highlight"><pre><code class="text">非数字类型，hashtable中add或update，由\_zend\_hash\_add\_or\_update实现

``` c hashtable update(key is str)
    #define zend_hash_update(ht, arKey, nKeyLength, pData, nDataSize, pDest) \
        _zend_hash_add_or_update(ht, arKey, nKeyLength, pData, nDataSize, pDest, HASH_UPDATE ZEND_FILE_LINE_CC)
    #define zend_hash_add(ht, arKey, nKeyLength, pData, nDataSize, pDest) \
        _zend_hash_add_or_update(ht, arKey, nKeyLength, pData, nDataSize, pDest, HASH_ADD ZEND_FILE_LINE_CC)
</code></pre></div>
<p>hashtable string类型key的插入更新函数</p>

<p>``` c hashtable zend_hash_add_or_update
    ZEND_API int _zend_hash_add_or_update(HashTable *ht, const char *arKey, uint nKeyLength, void *pData, uint nDataSize, void **pDest, int flag ZEND_FILE_LINE_DC)
    {
        ulong h;
        uint nIndex;
        Bucket *p;
    #ifdef ZEND_SIGNALS
        TSRMLS_FETCH();
    #endif
        IS_CONSISTENT(ht);</p>
<div class="highlight"><pre><code class="text">    if (nKeyLength &lt;= 0) {
#if ZEND_DEBUG
        ZEND_PUTS(“zend_hash_update: Can’t put in empty key\n”);
#endif
        return FAILURE;
    }

    CHECK_INIT(ht);

    h = zend_inline_hash_func(arKey, nKeyLength);
    nIndex = h &amp; ht-&gt;nTableMask;  // hash，并确定插到哪个hashtable的bucket

    p = ht-&gt;arBuckets[nIndex];
    while (p != NULL) {              // bucket 非空
        if (p-&gt;arKey == arKey ||
                ((p-&gt;h == h) &amp;&amp; (p-&gt;nKeyLength == nKeyLength) &amp;&amp; !memcmp(p-&gt;arKey, arKey, nKeyLength))) {
            if (flag &amp; HASH_ADD) {   // add时重复返回失败
                return FAILURE;
            }
            HANDLE_BLOCK_INTERRUPTIONS();
#if ZEND_DEBUG
            if (p-&gt;pData == pData) {
                ZEND_PUTS(“Fatal error in zend_hash_update: p-&gt;pData == pData\n”);
                HANDLE_UNBLOCK_INTERRUPTIONS();
                return FAILURE;
            }
#endif
            if (ht-&gt;pDestructor) {  // pdestructor 实际为处理zval **类型的析构函数
                ht-&gt;pDestructor(p-&gt;pData);
            }
            UPDATE_DATA(ht, p, pData, nDataSize);
            if (pDest) {
                *pDest = p-&gt;pData;
            }
            HANDLE_UNBLOCK_INTERRUPTIONS();
            return SUCCESS;
        }
        p = p-&gt;pNext;
    }

    if (IS_INTERNED(arKey)) {
        p = (Bucket *) pemalloc(sizeof(Bucket), ht-&gt;persistent);
        if (!p) {
            return FAILURE;
        }
        p-&gt;arKey = arKey;
    } else {                      // 第一个节点，创建Bucket，
        p = (Bucket *) pemalloc(sizeof(Bucket) + nKeyLength, ht-&gt;persistent);
        if (!p) {
            return FAILURE;
        }
        p-&gt;arKey = (const char*)(p + 1);
        memcpy((char*)p-&gt;arKey, arKey, nKeyLength);  // 拷贝包括\0在内的字符串

    }
    p-&gt;nKeyLength = nKeyLength;
    INIT_DATA(ht, p, pData, nDataSize);   // 数据初始化见后
    p-&gt;h = h;
    CONNECT_TO_BUCKET_DLLIST(p, ht-&gt;arBuckets[nIndex]); // Bucket *p 插入 bucket链表头
    if (pDest) {
        *pDest = p-&gt;pData;
    }
    HANDLE_BLOCK_INTERRUPTIONS();
    CONNECT_TO_GLOBAL_DLLIST(p, ht);
    ht-&gt;arBuckets[nIndex] = p;
    HANDLE_UNBLOCK_INTERRUPTIONS();

    ht-&gt;nNumOfElements++;
    ZEND_HASH_IF_FULL_DO_RESIZE(ht);          /* If the Hash table is full, resize it */
    return SUCCESS;
}
</code></pre></div><div class="highlight"><pre><code class="text">检查bucket 数组是否初始化

``` c
    #define CHECK_INIT (ht) do {                                                        \
        if (UNEXPECTED((ht)-&gt;nTableMask == 0)) {                                        \
            (ht)-&gt;arBuckets = (Bucket **) pecalloc((ht)-&gt;nTableSize, sizeof (Bucket *), (ht)-&gt;persistent);     \
            (ht)-&gt;nTableMask = (ht)-&gt;nTableSize – 1;                             \
        }                                                                        \
    } while (0)
</code></pre></div>
<p>1.htable bucket已存在该key 更新hashtable *ht  Bucket* p zval **pData nDataSize sizeof( zval *)</p>
<div class="highlight"><pre><code class="c">    <span class="err">#</span><span class="n">define</span> <span class="n">UPDATE_DATA</span> <span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">pData</span><span class="p">,</span> <span class="n">nDataSize</span><span class="p">)</span>                                                         
        <span class="k">if</span> <span class="p">(</span><span class="n">nDataSize</span> <span class="o">==</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">))</span> <span class="p">{</span>                                                                  
            <span class="k">if</span> <span class="p">((</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pData</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pDataPtr</span><span class="p">)</span> <span class="p">{</span>    
                <span class="n">pefree_rel</span><span class="p">((</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pData</span><span class="p">,</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">persistent</span><span class="p">);</span>                                             
            <span class="p">}</span>                                                                                                         
            <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pDataPtr</span><span class="p">,</span> <span class="n">pData</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span> <span class="kt">void</span> <span class="o">*</span><span class="p">));</span>                                           
            <span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pData</span> <span class="o">=</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pDataPtr</span><span class="p">;</span>                                                                    
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>                                                                                                  
            <span class="k">if</span> <span class="p">((</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pData</span> <span class="o">==</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pDataPtr</span><span class="p">)</span> <span class="p">{</span>                                                             
                <span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pData</span> <span class="o">=</span> <span class="p">(</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">pemalloc_rel</span><span class="p">(</span><span class="n">nDataSize</span><span class="p">,</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">persistent</span><span class="p">);</span>              \
                             <span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pDataPtr</span><span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>                                                                            
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>                                                                                             
                <span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pData</span> <span class="o">=</span> <span class="p">(</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="n">perealloc_rel</span><span class="p">((</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pData</span><span class="p">,</span> <span class="n">nDataSize</span><span class="p">,</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">persistent</span><span class="p">);</span>   \
                             <span class="cm">/* (p)-&gt;pDataPtr is already NULL so no need to initialize it */</span>                     
            <span class="p">}</span>                                                                                                         
            <span class="n">memcpy</span><span class="p">((</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pData</span><span class="p">,</span> <span class="n">pData</span><span class="p">,</span> <span class="n">nDataSize</span><span class="p">);</span>                                                     
        <span class="p">}</span>
</code></pre></div>
<p>2.bucket为空 添加数据pData hashtable *ht  Bucket* p zval **pData nDataSize sizeof( zval *)</p>
<div class="highlight"><pre><code class="c">    <span class="err">#</span><span class="n">define</span> <span class="n">INIT_DATA</span> <span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">pData</span><span class="p">,</span> <span class="n">nDataSize</span><span class="p">);</span>                                          \
            <span class="k">if</span> <span class="p">(</span><span class="n">nDataSize</span> <span class="o">==</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">))</span> <span class="p">{</span>                                              \
                <span class="n">memcpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">p</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pDataPtr</span><span class="p">,</span> <span class="n">pData</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">));</span> <span class="c1">// 拷贝zval*到pDataPtr            \</span>
<span class="c1">                (p)-&gt;pData = &amp;(p)-&gt;pDataPtr;                                               \</span>
<span class="c1">            } else {                                                                             \</span>
<span class="c1">                (p)-&gt;pData = ( void *) pemalloc_rel(nDataSize, (ht)-&gt;persistent);\</span>
<span class="c1">                if (!(p)-&gt;pData) {                                                              \</span>
<span class="c1">                    pefree_rel(p, (ht)-&gt;persistent);                                      \</span>
<span class="c1">                    return FAILURE;                                                           \</span>
<span class="c1">                }                                                                                    \</span>
<span class="c1">                memcpy((p)-&gt;pData, pData, nDataSize);                                \</span>
<span class="c1">                (p)-&gt;pDataPtr= NULL;                                                             \</span>
<span class="c1">            }</span>
        <span class="err">更新该</span><span class="n">bucket</span><span class="err">的链表插入表头</span>  <span class="err">和全局链表插入表尾</span>
    <span class="err">#</span><span class="n">define</span> <span class="n">CONNECT_TO_BUCKET_DLLIST</span> <span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">list_head</span><span class="p">)</span>      \
            <span class="p">(</span><span class="n">element</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pNext</span> <span class="o">=</span> <span class="p">(</span><span class="n">list_head</span><span class="p">);</span>       <span class="c1">// 插入到队头                  \</span>
<span class="c1">        ( element)-&gt;pLast = NULL;                                        \</span>
<span class="c1">        if ((element)-&gt;pNext) {                                              \</span>
<span class="c1">            (element)-&gt;pNext-&gt;pLast = (element);                 \</span>
<span class="c1">        }</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">CONNECT_TO_GLOBAL_DLLIST</span> <span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">ht</span><span class="p">)</span>                  \
            <span class="p">(</span><span class="n">element</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pListLast</span> <span class="o">=</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pListTail</span><span class="p">;</span>                         \
        <span class="p">(</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pListTail</span> <span class="o">=</span> <span class="p">(</span><span class="n">element</span><span class="p">);</span>                                    \
        <span class="p">(</span><span class="n">element</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pListNext</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>                                    \
        <span class="k">if</span> <span class="p">((</span><span class="n">element</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pListLast</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>                             \
            <span class="p">(</span><span class="n">element</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pListLast</span><span class="o">-&gt;</span><span class="n">pListNext</span> <span class="o">=</span> <span class="p">(</span><span class="n">element</span><span class="p">);</span>         \
        <span class="p">}</span>                                                                         \
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pListHead</span><span class="p">)</span> <span class="p">{</span>                                              \
            <span class="p">(</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pListHead</span> <span class="o">=</span> <span class="p">(</span><span class="n">element</span><span class="p">);</span>                               \
        <span class="p">}</span>                                                                         \
        <span class="k">if</span> <span class="p">((</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pInternalPointer</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>                           \
            <span class="p">(</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">pInternalPointer</span> <span class="o">=</span> <span class="p">(</span><span class="n">element</span><span class="p">);</span>                        \
        <span class="p">}</span>
        <span class="err">判断是否需要</span><span class="n">rehash</span>  <span class="err">元素数目大于</span><span class="n">hash</span><span class="err">的</span><span class="n">bucket</span><span class="err">数目时触发</span>
    <span class="err">#</span><span class="n">define</span> <span class="n">ZEND_HASH_IF_FULL_DO_RESIZE</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span>                   \
            <span class="k">if</span> <span class="p">((</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">nNumOfElements</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">nTableSize</span><span class="p">)</span> <span class="p">{</span>  \
                <span class="n">zend_hash_do_resize</span><span class="p">(</span><span class="n">ht</span><span class="p">);</span>                        \
            <span class="p">}</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">zend_hash_do_resize</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Bucket</span> <span class="o">**</span><span class="n">t</span><span class="p">;</span>
    <span class="err">#</span><span class="n">ifdef</span> <span class="n">ZEND_SIGNALS</span>
        <span class="n">TSRMLS_FETCH</span><span class="p">();</span>
    <span class="err">#</span><span class="n">endif</span>
        <span class="n">IS_CONSISTENT</span><span class="p">(</span><span class="n">ht</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">((</span><span class="n">ht</span><span class="o">-&gt;</span><span class="n">nTableSize</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>     <span class="cm">/* Let’s double the table size */</span>
            <span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="n">Bucket</span> <span class="o">**</span><span class="p">)</span> <span class="n">perealloc_recoverable</span><span class="p">(</span><span class="n">ht</span><span class="o">-&gt;</span><span class="n">arBuckets</span><span class="p">,</span> <span class="p">(</span><span class="n">ht</span><span class="o">-&gt;</span><span class="n">nTableSize</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Bucket</span> <span class="o">*</span><span class="p">),</span> <span class="n">ht</span><span class="o">-&gt;</span><span class="n">persistent</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">HANDLE_BLOCK_INTERRUPTIONS</span><span class="p">();</span>
                <span class="n">ht</span><span class="o">-&gt;</span><span class="n">arBuckets</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
                <span class="n">ht</span><span class="o">-&gt;</span><span class="n">nTableSize</span> <span class="o">=</span> <span class="p">(</span><span class="n">ht</span><span class="o">-&gt;</span><span class="n">nTableSize</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">);</span>
                <span class="n">ht</span><span class="o">-&gt;</span><span class="n">nTableMask</span> <span class="o">=</span> <span class="n">ht</span><span class="o">-&gt;</span><span class="n">nTableSize</span> <span class="err">–</span> <span class="mi">1</span><span class="p">;</span>
                <span class="n">zend_hash_rehash</span><span class="p">(</span><span class="n">ht</span><span class="p">);</span>
                <span class="n">HANDLE_UNBLOCK_INTERRUPTIONS</span><span class="p">();</span>
                <span class="k">return</span> <span class="n">SUCCESS</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">FAILURE</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">SUCCESS</span><span class="p">;</span>
    <span class="p">}</span>


    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="n">zend_hash_rehash</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Bucket</span> <span class="o">*</span> <span class="n">p</span><span class="p">;</span>
        <span class="n">uint</span> <span class="n">nIndex</span><span class="p">;</span>

        <span class="n">IS_CONSISTENT</span><span class="p">(</span><span class="n">ht</span> <span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span> <span class="n">UNEXPECTED</span><span class="p">(</span><span class="n">ht</span> <span class="o">-&gt;</span><span class="n">nNumOfElements</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">SUCCESS</span> <span class="p">;</span>
        <span class="p">}</span>

        <span class="n">memset</span><span class="p">(</span><span class="n">ht</span> <span class="o">-&gt;</span><span class="n">arBuckets</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ht</span><span class="o">-&gt;</span><span class="n">nTableSize</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Bucket</span> <span class="o">*</span><span class="p">));</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">ht</span><span class="o">-&gt;</span> <span class="n">pListHead</span><span class="p">;</span>  <span class="c1">// 根据全局链表依次rehash，hash值保存在p-&gt;h rehash只需要重新&amp;mask</span>
        <span class="k">while</span> <span class="p">(</span> <span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">nIndex</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span> <span class="n">h</span> <span class="o">&amp;</span> <span class="n">ht</span><span class="o">-&gt;</span><span class="n">nTableMask</span> <span class="p">;</span>
            <span class="n">CONNECT_TO_BUCKET_DLLIST</span><span class="p">(</span><span class="n">p</span> <span class="p">,</span> <span class="n">ht</span><span class="o">-&gt;</span> <span class="n">arBuckets</span><span class="p">[</span><span class="n">nIndex</span> <span class="p">]);</span>  <span class="c1">// 重建全局链表</span>
            <span class="n">ht</span> <span class="o">-&gt;</span><span class="n">arBuckets</span><span class="p">[</span> <span class="n">nIndex</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span> <span class="n">pListNext</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">SUCCESS</span> <span class="p">;</span>
    <span class="p">}</span>
</code></pre></div>
<h2 id="toc_3">2.5 Hashtable之查找</h2>

<p>查找string类型的arKey，数字类型的string是查不到的</p>
<div class="highlight"><pre><code class="c">    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_find</span><span class="p">(</span><span class="k">const</span> <span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">arKey</span><span class="p">,</span> <span class="n">uint</span> <span class="n">nKeyLength</span> <span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="n">pData</span> <span class="p">);</span>
</code></pre></div>
<p>查找string类型的arKey nkeyleng为0则为整型，否则为string类型的整型，hash值为h</p>
<div class="highlight"><pre><code class="c">    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_quick_find</span><span class="p">(</span><span class="k">const</span> <span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">arKey</span><span class="p">,</span> <span class="n">uint</span> <span class="n">nKeyLength</span><span class="p">,</span> <span class="n">ulong</span> <span class="n">h</span> <span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="n">pData</span> <span class="p">);</span>
</code></pre></div>
<p>查找整型h指定的data</p>
<div class="highlight"><pre><code class="c">    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_index_find</span><span class="p">(</span><span class="k">const</span> <span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="n">ulong</span> <span class="n">h</span><span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="n">pData</span> <span class="p">);</span>
</code></pre></div>
<p>hash查找 hashtable* arrkey keylen包括结尾\0 参数的pdata为&amp;（zval **） 返回zval **的p-&gt;pData</p>
<div class="highlight"><pre><code class="c">    <span class="o">/*</span> <span class="n">Returns</span> <span class="n">SUCCESS</span> <span class="k">if</span> <span class="n">found</span> <span class="n">and</span> <span class="n">FAILURE</span> <span class="k">if</span> <span class="n">not</span>
       <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="n">zend_hash_find</span><span class="p">(</span><span class="k">const</span> <span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">arKey</span><span class="p">,</span> <span class="n">uint</span> <span class="n">nKeyLength</span> <span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="n">pData</span> <span class="p">)</span>
       <span class="p">{</span>
       <span class="n">ulong</span> <span class="n">h</span><span class="p">;</span>
       <span class="n">uint</span> <span class="n">nIndex</span><span class="p">;</span>
       <span class="n">Bucket</span> <span class="o">*</span> <span class="n">p</span><span class="p">;</span>

       <span class="n">IS_CONSISTENT</span><span class="p">(</span><span class="n">ht</span> <span class="p">);</span>

       <span class="n">h</span> <span class="o">=</span> <span class="n">zend_inline_hash_func</span> <span class="p">(</span><span class="n">arKey</span><span class="p">,</span> <span class="n">nKeyLength</span><span class="p">);</span>
       <span class="n">nIndex</span> <span class="o">=</span> <span class="n">h</span> <span class="o">&amp;</span> <span class="n">ht</span><span class="o">-&gt;</span><span class="n">nTableMask</span> <span class="p">;</span>

       <span class="n">p</span> <span class="o">=</span> <span class="n">ht</span><span class="o">-&gt;</span> <span class="n">arBuckets</span><span class="p">[</span><span class="n">nIndex</span> <span class="p">];</span>
       <span class="k">while</span> <span class="p">(</span> <span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
       <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">arKey</span> <span class="o">==</span> <span class="n">arKey</span> <span class="o">||</span>
       <span class="p">((</span><span class="n">p</span><span class="o">-&gt;</span> <span class="n">h</span> <span class="o">==</span> <span class="n">h</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nKeyLength</span> <span class="o">==</span> <span class="n">nKeyLength</span> <span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">memcmp</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">arKey</span> <span class="p">,</span> <span class="n">arKey</span><span class="p">,</span> <span class="n">nKeyLength</span><span class="p">)))</span> <span class="p">{</span>
     <span class="o">*</span><span class="n">pData</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">pData</span> <span class="p">;</span>
     <span class="k">return</span> <span class="n">SUCCESS</span> <span class="p">;</span>
     <span class="p">}</span>
     <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span> <span class="n">pNext</span><span class="p">;</span>
     <span class="p">}</span>
     <span class="k">return</span> <span class="n">FAILURE</span> <span class="p">;</span>
     <span class="p">}</span>
</code></pre></div>
<h2 id="toc_4">2.6 Hashtable之遍历</h2>
<div class="highlight"><pre><code class="c">    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_internal_pointer_reset</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span> \

    <span class="n">zend_hash_internal_pointer_reset_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_has_more_elements</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span> \
    <span class="n">zend_hash_has_more_elements_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_move_forward</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span> \
    <span class="n">zend_hash_move_forward_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_move_backwards</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span> \
    <span class="n">zend_hash_move_backwards_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_get_current_key</span> <span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">str_index</span><span class="p">,</span> <span class="n">num_index</span><span class="p">,</span> <span class="n">duplicate</span><span class="p">)</span> \
    <span class="n">zend_hash_get_current_key_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">str_index</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">num_index</span><span class="p">,</span> <span class="n">duplicate</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_get_current_key_type</span> <span class="p">(</span><span class="n">ht</span><span class="p">)</span> \
    <span class="n">zend_hash_get_current_key_type_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_get_current_data</span> <span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">pData</span><span class="p">)</span> \
    <span class="n">zend_hash_get_current_data_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">pData</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_internal_pointer_end</span><span class="p">(</span><span class="n">ht</span><span class="p">)</span> \
    <span class="n">zend_hash_internal_pointer_end_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_update_current_key</span> <span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">key_type</span><span class="p">,</span> <span class="n">str_index</span><span class="p">,</span> <span class="n">str_length</span><span class="p">,</span> <span class="n">num_index</span><span class="p">)</span> \
    <span class="n">zend_hash_update_current_key_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">key_type</span><span class="p">,</span> <span class="n">str_index</span><span class="p">,</span> <span class="n">str_length</span><span class="p">,</span> <span class="n">num_index</span><span class="p">,</span> <span class="n">HASH_UPDATE_KEY_ANYWAY</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span>

    <span class="err">#</span><span class="n">define</span> <span class="n">zend_hash_has_more_elements_ex</span> <span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span> \
    <span class="p">(</span><span class="n">zend_hash_get_current_key_type_ex</span><span class="p">(</span><span class="n">ht</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span> <span class="o">==</span> <span class="n">HASH_KEY_NON_EXISTANT</span> <span class="o">?</span> <span class="n">FAILURE</span> <span class="o">:</span> <span class="n">SUCCESS</span><span class="p">)</span>
    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="n">zend_hash_move_forward_ex</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span> <span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span> <span class="n">pos</span><span class="p">);</span>
    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_move_backwards_ex</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span> <span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span> <span class="n">pos</span><span class="p">);</span>
    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_get_current_key_ex</span><span class="p">(</span><span class="k">const</span> <span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">str_index</span><span class="p">,</span> <span class="n">uint</span> <span class="o">*</span><span class="n">str_length</span><span class="p">,</span> <span class="n">ulong</span> <span class="o">*</span><span class="n">num_index</span><span class="p">,</span> <span class="n">zend_bool</span> <span class="n">duplicate</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span><span class="n">pos</span><span class="p">);</span>
    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_get_current_key_type_ex</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span><span class="n">pos</span><span class="p">);</span>
    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_get_current_data_ex</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span> <span class="p">,</span> <span class="kt">void</span> <span class="o">**</span> <span class="n">pData</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span> <span class="n">pos</span><span class="p">);</span>
    <span class="n">ZEND_API</span> <span class="kt">void</span> <span class="nf">zend_hash_internal_pointer_reset_ex</span> <span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span><span class="n">pos</span><span class="p">);</span>
    <span class="n">ZEND_API</span> <span class="kt">void</span> <span class="nf">zend_hash_internal_pointer_end_ex</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span><span class="n">pos</span><span class="p">);</span>
    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_update_current_key_ex</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span> <span class="p">,</span> <span class="kt">int</span> <span class="n">key_type</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">str_index</span><span class="p">,</span> <span class="n">uint</span> <span class="n">str_length</span><span class="p">,</span> <span class="n">ulong</span> <span class="n">num_index</span><span class="p">,</span> <span class="kt">int</span> <span class="n">mode</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span> <span class="n">pos</span><span class="p">);</span>
    <span class="n">reset</span><span class="err">是将内部指针设为全局链表头部</span>
    <span class="n">ZEND_API</span> <span class="kt">void</span> <span class="n">zend_hash_internal_pointer_reset_ex</span> <span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span><span class="n">pos</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="n">IS_CONSISTENT</span><span class="p">(</span><span class="n">ht</span> <span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span> <span class="n">pos</span><span class="p">)</span>
     <span class="o">*</span><span class="n">pos</span> <span class="o">=</span> <span class="n">ht</span><span class="o">-&gt;</span><span class="n">pListHead</span> <span class="p">;</span>
     <span class="k">else</span>
    <span class="n">ht</span> <span class="o">-&gt;</span><span class="n">pInternalPointer</span> <span class="o">=</span> <span class="n">ht</span><span class="o">-&gt;</span> <span class="n">pListHead</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div>
<p>判断下一个节点是否存在 </p>
<div class="highlight"><pre><code class="c">    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_get_current_key_type_ex</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span><span class="n">pos</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Bucket</span> <span class="o">*</span> <span class="n">p</span><span class="p">;</span>

        <span class="n">p</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">?</span> <span class="p">(</span><span class="o">*</span><span class="n">pos</span> <span class="p">)</span> <span class="o">:</span> <span class="n">ht</span><span class="o">-&gt;</span><span class="n">pInternalPointer</span> <span class="p">;</span>

        <span class="n">IS_CONSISTENT</span><span class="p">(</span><span class="n">ht</span> <span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nKeyLength</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">HASH_KEY_IS_STRING</span> <span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">HASH_KEY_IS_LONG</span> <span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">HASH_KEY_NON_EXISTANT</span> <span class="p">;</span>
    <span class="p">}</span>
</code></pre></div>
<p>后移，当前已经是最后则失败</p>
<div class="highlight"><pre><code class="c">    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_move_forward_ex</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span> <span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span> <span class="n">pos</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">HashPosition</span> <span class="o">*</span> <span class="n">current</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">?</span> <span class="n">pos</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">ht</span> <span class="o">-&gt;</span><span class="n">pInternalPointer</span><span class="p">;</span>

        <span class="n">IS_CONSISTENT</span><span class="p">(</span><span class="n">ht</span> <span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">*</span> <span class="n">current</span><span class="p">)</span> <span class="p">{</span>
            <span class="o">*</span><span class="n">current</span> <span class="o">=</span> <span class="p">(</span><span class="o">*</span><span class="n">current</span> <span class="p">)</span><span class="o">-&gt;</span><span class="n">pListNext</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">SUCCESS</span> <span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span>
            <span class="k">return</span> <span class="n">FAILURE</span> <span class="p">;</span>
    <span class="p">}</span>
</code></pre></div>
<p>获取当前key str_index为 &amp;（char *） str_length 为NULL index为 &amp;(ulong) </p>
<div class="highlight"><pre><code class="c">        <span class="cm">/* This function should be made binary safe  */</span>
    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_get_current_key_ex</span><span class="p">(</span><span class="k">const</span> <span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">str_index</span><span class="p">,</span> <span class="n">uint</span> <span class="o">*</span><span class="n">str_length</span><span class="p">,</span> <span class="n">ulong</span> <span class="o">*</span><span class="n">num_index</span><span class="p">,</span> <span class="n">zend_bool</span> <span class="n">duplicate</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span><span class="n">pos</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Bucket</span> <span class="o">*</span> <span class="n">p</span><span class="p">;</span>

        <span class="n">p</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">?</span> <span class="p">(</span><span class="o">*</span><span class="n">pos</span> <span class="p">)</span> <span class="o">:</span> <span class="n">ht</span><span class="o">-&gt;</span><span class="n">pInternalPointer</span> <span class="p">;</span>

        <span class="n">IS_CONSISTENT</span><span class="p">(</span><span class="n">ht</span> <span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nKeyLength</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span> <span class="n">duplicate</span><span class="p">)</span> <span class="p">{</span>
                    <span class="o">*</span><span class="n">str_index</span> <span class="o">=</span> <span class="n">estrndup</span><span class="p">(</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">arKey</span> <span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nKeyLength</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">);</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="o">*</span><span class="n">str_index</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="o">-&gt;</span> <span class="n">arKey</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">if</span> <span class="p">(</span> <span class="n">str_length</span><span class="p">)</span> <span class="p">{</span>
                    <span class="o">*</span><span class="n">str_length</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nKeyLength</span> <span class="p">;</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">HASH_KEY_IS_STRING</span> <span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="o">*</span><span class="n">num_index</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">h</span> <span class="p">;</span>
                <span class="k">return</span> <span class="n">HASH_KEY_IS_LONG</span> <span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">HASH_KEY_NON_EXISTANT</span> <span class="p">;</span>
    <span class="p">}</span>
</code></pre></div>
<p>获取当前data  &amp;(zval **)</p>
<div class="highlight"><pre><code class="c">    <span class="n">ZEND_API</span> <span class="kt">int</span> <span class="nf">zend_hash_get_current_data_ex</span><span class="p">(</span><span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span> <span class="p">,</span> <span class="kt">void</span> <span class="o">**</span> <span class="n">pData</span><span class="p">,</span> <span class="n">HashPosition</span> <span class="o">*</span> <span class="n">pos</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Bucket</span> <span class="o">*</span> <span class="n">p</span><span class="p">;</span>

        <span class="n">p</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">?</span> <span class="p">(</span><span class="o">*</span><span class="n">pos</span> <span class="p">)</span> <span class="o">:</span> <span class="n">ht</span><span class="o">-&gt;</span><span class="n">pInternalPointer</span> <span class="p">;</span>

        <span class="n">IS_CONSISTENT</span><span class="p">(</span><span class="n">ht</span> <span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
            <span class="o">*</span><span class="n">pData</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">pData</span> <span class="p">;</span>
            <span class="k">return</span> <span class="n">SUCCESS</span> <span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">FAILURE</span> <span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div>
<p>示例</p>
<div class="highlight"><pre><code class="c">    <span class="k">for</span><span class="p">(</span><span class="n">zend_hash_internal_pointer_reset</span><span class="p">(</span><span class="n">Z_ARRVAL_P</span><span class="p">(</span><span class="n">request</span><span class="p">));</span>
            <span class="n">SUCCESS</span> <span class="o">==</span> <span class="n">zend_hash_has_more_elements</span><span class="p">(</span><span class="n">Z_ARRVAL_P</span><span class="p">(</span><span class="n">request</span><span class="p">));</span>
            <span class="n">zend_hash_move_forward</span><span class="p">(</span><span class="n">Z_ARRVAL_P</span><span class="p">(</span><span class="n">request</span><span class="p">)))</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">HASH_KEY_IS_STRING</span> <span class="o">!=</span> <span class="n">zend_hash_get_current_key</span><span class="p">(</span><span class="n">Z_ARRVAL_P</span><span class="p">(</span><span class="n">request</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">key</span> <span class="p">,</span> <span class="o">&amp;</span><span class="n">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">)){</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">FAILURE</span> <span class="o">==</span> <span class="n">zend_hash_get_current_data</span><span class="p">(</span><span class="n">Z_ARRVAL_P</span><span class="p">(</span><span class="n">request</span><span class="p">),</span> <span class="p">(</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">param</span><span class="p">)){</span>
        <span class="p">}</span>

    <span class="p">}</span>
</code></pre></div>
<p><em>本文地址: <a href=http://www.vneptune.com/blog/php-array/> <a href="http://www.vneptune.com/blog/php-array/">http://www.vneptune.com/blog/php-array/</a></a></em></p>

<p><em>转载请注明出处</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP zval]]></title>
    <link href="http://songjingbo.github.com/blog/php-zval/"/>
    <updated>2013-04-21T22:54:00+08:00</updated>
    <id>http://songjingbo.github.com/blog/php-zval</id>
    <content type="html"><![CDATA[<h1 id="toc_0">1. PHP变量</h1>

<p>PHP是弱类型语言,变量不需要声明类型, 直接使用, 根据调用需要自动进行类型转换;</p>

<p>实际上PHP是用C来实现的, 在编写扩展时, 需要了解PHP弱类型变量在C中是如何实现的</p>

<!--more-->

<h2 id="toc_1">1.1 zval之定义</h2>

<p>在Zend/zend.h中, 可以看到</p>

<p>``` c zval defination </p>
<div class="highlight"><pre><code class="text">struct _zval_struct {
     /* Variable information */
     zvalue_value value;     /* value */
     zend_uint refcount;   //  5.4中定义为refcount__gc
     zend_uchar type;    /* active type */
     zend_uchar is_ref;   //   5.4中定义为is_ref__gc
};

typedef struct _zval_struct zval;
</code></pre></div><div class="highlight"><pre><code class="text">这里需要注意,  **\_zval\_struct**的定义在PHP5.2和5.4中并不一样, 因此不建议直接访问或操作成员,
而是通过以下宏来处理zval结构体中的成员:

### 1.1.1 type

type标识PHP变量的类型

我们都知道，PHP虽然是弱类型语言, 底层实际上还是用C来实现. PHP对于任何类型的变量都是存储在zval中的, 通过type来确定该变量实际的类型

在扩展中，type可以通过以下宏获取和判断:

``` c zval type

    #define Z_TYPE(zval)        (zval).type
    #define Z_TYPE_P(zval_p)    Z_TYPE(*zval_p)
    #define Z_TYPE_PP(zval_pp)  Z_TYPE(**zval_pp)

    /* data types */
    /* All data types &lt;= IS_BOOL have their constructor/destructors skipped */
    #define IS_NULL     0
    #define IS_LONG     1
    #define IS_DOUBLE   2
    #define IS_BOOL     3
    #define IS_ARRAY    4
    #define IS_OBJECT   5
    #define IS_STRING   6
    #define IS_RESOURCE 7
    #define IS_CONSTANT 8
    #define IS_CONSTANT_ARRAY   9
    #define IS_CALLABLE 10   //   5.4新增
</code></pre></div>
<h3 id="toc_2">1.1.2 is_ref</h3>

<p>is_ref标识PHP变量是否是引用类型, 例如我们通过<code>$a = &amp;$b</code>来定义的变量a，这时zval变量就会被标识为引用类型,</p>

<p>对is_ref可以通过以下宏判断和设置:</p>

<p>``` c zval reference</p>
<div class="highlight"><pre><code class="text">// from PHP 5.4
#define Z_ISREF(z)          Z_ISREF_P(&amp;(z))
#define Z_ISREF_P(pz)           zval_isref_p(pz)
#define Z_ISREF_PP(ppz)         Z_ISREF_P(*(ppz))
static zend_always_inline zend_bool zval_isref_p(zval* pz) {
    return pz-&gt;is_ref__gc;
}

#define Z_SET_ISREF_P(pz)       zval_set_isref_p(pz) // is_ref =1
#define Z_UNSET_ISREF_P(pz)     zval_unset_isref_p(pz) // is_ref=0
#define Z_SET_ISREF_TO_P(pz, isref) zval_set_isref_to_p(pz, isref) // is_ref = isref(true or false)
</code></pre></div><div class="highlight"><pre><code class="text">### 1.1.3 refcount

refcount标识zval引用计数

PHP变量的copy\_on\_write就是通过refcount来实现的, PHP为了提高性能，在拷贝PHP变量时，实际上是不执行内存拷贝的，只需增加refcount即可;
而在对该zval进行写操作时, 才会进行copy, 这就是PHP copy\_on\_write的实现方式:

    if (is_ref != 0) 
        是引用类型，不分离变量，直接写该zvall，此后所有引用变量的值都会发生变化
    else
        不是引用类型，分离该变量，重新创建一个zval变量并拷贝全部数据，同时将refcount置1 is_ref置0; 原来的zval变量之需要refcount--即可

具体实现可以参考SEPARATE\_ZVAL宏

对refcount可以通过以下宏判断和操作: 

``` c zval refcount

    // from PHP 5.4
    #define Z_REFCOUNT(z)           Z_REFCOUNT_P(&amp;(z))
    #define Z_REFCOUNT_P(pz)        zval_refcount_p(pz)
    #define Z_REFCOUNT_PP(ppz)      Z_REFCOUNT_P(*(ppz))
    static zend_always_inline zend_uint zval_refcount_p(zval* pz) {
        return pz-&gt;refcount__gc;
    }

    #define Z_SET_REFCOUNT_P(pz, rc)    zval_set_refcount_p(pz, rc)
    #define Z_ADDREF_P(pz)          zval_addref_p(pz)  // +1
    #define Z_DELREF_P(pz)          zval_delref_p(pz)  // -1
</code></pre></div>
<p><strong>这里需要注意, 扩展中对于refcount操作尤其需要注意, 错误处理很可能导致PHP引用计数异常，可能导致内存泄露或释放变量时直接coredump!</strong></p>

<h3 id="toc_3">1.1.4 value</h3>

<p>value保存zval变量的值</p>

<p>上面说了PHP通过type确定变量类型, 那么不同类型的变量如何保存在同一个value变量中呢? 应该想到在C语言中可以通过union来定义, 这就是PHP实现弱类型的基础</p>

<p>``` c zval defination</p>
<div class="highlight"><pre><code class="text">//PHP 5.2和5.4中相同
typedef union _zvalue_value {
    long lval;                  /* long value */
    double dval;                /* double value */
    struct {
        char *val;
        int len;
    } str;
    HashTable *ht;              /* hash table value */
    zend_object_value obj;
} zvalue_value;
</code></pre></div><div class="highlight"><pre><code class="text">浮点数或整数本别通过lval或dval来保存, 这里可以看出, PHP对整数支持的范围为long,而非unsigned long, 对于超出限制的变量, PHP会转换为double类型保存, 需要获取整形时, PHP再将其转换为long, 需要注意的是, 往往这时会出现丢失精度的问题

字符串通过上面str结构来保存, 并非以&#39;\0&#39;标注结束, 而是通过len记录长度, 但为了避免操作使用时越界, PHP也会在字符床末尾添加&#39;\0&#39;.

array类型则是通过HashTable保存, ht是指向HashTable的指针, 关于array类型变量如何在HashTable中存储, 后面再单独说明

## 1.2 zval之读写

对各个类型zval赋值操作的宏一般以ZVAL\_TYPE命名, 相应的zval \* 为ZVAL_TYPE\_P, zval \*\* 为ZVAL_TYPE_PP

这部分操作可以在zend\_operators.h  zend_API.h察看, 下面把各类型zval读写操作的宏拿出来看下:

*IS\_NULL 0*

``` c null
    #define ZVAL_NULL(z) {          \
        Z_TYPE_P(z) = IS_NULL;      \
    }
</code></pre></div>
<p><em>IS_LONG 1  IS_CONSTANT 8</em></p>

<p><code>c long
    #define Z_LVAL(zval)            (zval).value.lval
    #define ZVAL_LONG(z, l) {       \
        zval *__z = (z);            \
        Z_LVAL_P(__z) = l;          \
        Z_TYPE_P(__z) = IS_LONG;    \
    }
</code></p>

<p><em>IS_DOUBLE  2</em></p>

<p><code>c double
    #define Z_DVAL(zval)            (zval).value.dval
    #define ZVAL_DOUBLE(z, d) {     \
        zval *__z = (z);            \
        Z_DVAL_P(__z) = d;          \
        Z_TYPE_P(__z) = IS_DOUBLE;  \
    }
</code></p>

<p><em>IS_BOOL  3</em></p>

<p><code>c bool
    #define Z_BVAL(zval)            ((zend_bool)(zval).value.lval)
    #define ZVAL_BOOL(z, b) do {    \  //5.4
        zval *__z = (z);            \
                    Z_LVAL_P(__z) = ((b) != 0); \
                    Z_TYPE_P(__z) = IS_BOOL;    \
    } while (0)
    #define ZVAL_FALSE(z)                   ZVAL_BOOL(z, 0)
    #define ZVAL_TRUE(z)                    ZVAL_BOOL(z, 1)
</code></p>

<p><em>IS_ARRAY  4 IS_CONSTANT_ARRAY 9</em></p>

<p>``` c array
    #define Z_ARRVAL(zval)          (zval).value.ht</p>
<div class="highlight"><pre><code class="text">// array类型后面单独详细说明, 初始化如下
zval * init_array;
MAKE_STD_ZVAL(init_array);
array_init(init_array); 
array_init_size (arg, size)
add_assoc_stringl(init_array, &quot;key&quot;, &quot;value&quot;, strlen(&quot;value&quot;), 1);
</code></pre></div><div class="highlight"><pre><code class="text">*IS\_OBJECT 5*

``` c object
    #define Z_OBJVAL(zval)          (zval).value.obj
    #define Z_OBJ_HANDLE(zval)      Z_OBJVAL(zval).handle
    #define Z_OBJ_HT(zval)          Z_OBJVAL(zval).handlers
    #define Z_OBJCE(zval)           zend_get_class_entry(&amp;(zval) TSRMLS_CC)
    #define Z_OBJPROP(zval)         Z_OBJ_HT((zval))-&gt;get_properties(&amp;(zval) TSRMLS_CC)
    #define Z_OBJ_HANDLER(zval, hf) Z_OBJ_HT((zval))-&gt;hf
    #define Z_OBJDEBUG(zval,is_tmp) (Z_OBJ_HANDLER((zval),get_debug_info)?Z_OBJ_HANDLER((zval),get_debug_info)(&amp;(zval),&amp;is_tmp TSRMLS_CC):(is_tmp=0,Z_OBJ_HANDLER((zval),get_properties)?Z_OBJPROP(zval):NULL))  //   5.4新增
</code></pre></div>
<p><em>IS_STRING 6</em></p>

<p>``` c string
    #define Z_STRVAL(zval)          (zval).value.str.val
    #define Z_STRLEN(zval)          (zval).value.str.len</p>
<div class="highlight"><pre><code class="text">// 注意duplicate参数, 对于一个已经创建好的zval \*z, 将char \*字符串s拷贝或直接赋值到zval中
// duplicate非零, zval的str保存\0结尾副本
#define ZVAL_STRING(z, s, duplicate) do {   \
    const char *__s=(s);                    \
    zval *__z = (z);                        \
    Z_STRLEN_P(__z) = strlen(__s);          \    // 通过strlen计算, 这里需要\0结尾的char *, 而不是zval中的
    Z_STRVAL_P(__z) = (duplicate?estrndup(__s, Z_STRLEN_P(__z)):(char*)__s);\
                      Z_TYPE_P(__z) = IS_STRING;                            \
} while (0)

#define ZVAL_STRINGL(z, s, l, duplicate) do {   \
    const char *__s=(s); int __l=l;             \
    zval *__z = (z);                            \
    Z_STRLEN_P(__z) = __l;                      \         
    Z_STRVAL_P(__z) = (duplicate?estrndup(__s, __l):(char*)__s);\
    Z_TYPE_P(__z) = IS_STRING;                  \
} while (0)

#define ZVAL_EMPTY_STRING(z) do {   \
    zval *__z = (z);                \
    Z_STRLEN_P(__z) = 0;            \
    Z_STRVAL_P(__z) = STR_EMPTY_ALLOC();\
    Z_TYPE_P(__z) = IS_STRING;      \
} while (0)

#define estrdup (s)            _estrdup((s) ZEND_FILE_LINE_CC ZEND_FILE_LINE_EMPTY_CC)
#define estrndup (s, length)   _estrndup((s), (length) ZEND_FILE_LINE_CC ZEND_FILE_LINE_EMPTY_CC)
</code></pre></div><div class="highlight"><pre><code class="text">estrdup其实就是emalloc后memcpy, 返回以\0结尾的char *， c接口可安全使用

``` c estrndup
    ZEND_API char *_estrndup(const char *s, uint length ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC)
    {
        char *p;
    #ifdef ZEND_SIGNALS
        TSRMLS_FETCH();
    #endif
        HANDLE_BLOCK_INTERRUPTIONS();

        p = (char *) _emalloc(length+1 ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC);
        if (UNEXPECTED(p == NULL)) {
            HANDLE_UNBLOCK_INTERRUPTIONS();
            return p;
        }
        memcpy(p, s, length);
        p[length] = 0;
        HANDLE_UNBLOCK_INTERRUPTIONS();
        return p;
    }
</code></pre></div>
<p><em>IS_RESOURCE 7</em></p>

<p><code>c resource
    #define Z_RESVAL(zval)          (zval).value.lval
    #define ZVAL_RESOURCE(z, l) do {    \
        zval *__z = (z);                \   // 5.4增加, 更加安全 
        Z_LVAL_P(__z) = l;              \
        Z_TYPE_P(__z) = IS_RESOURCE;\
    } while (0)
</code></p>

<h2 id="toc_4">1.3 Zval之拷贝</h2>

<p>``` c copy zval
    #define ZVAL_ZVAL(z, zv, copy, dtor) {      \  // php 5.4版本
        zend_uchar is_ref = Z_ISREF_P(z);       \
        zend_uint refcount = Z_REFCOUNT_P(z);   \
        ZVAL_COPY_VALUE(z, zv);                 \   //只覆盖了value和type<br>
        if (copy) {                             \
            zval_copy_ctor(z);                  \
        }                                       \
        if (dtor) {                             \
            if (!copy) {                        \
                ZVAL_NULL(zv);                  \
            }                                   \
            zval_ptr_dtor(&amp;zv);                 \
        }                                       \
        Z_SET_ISREF_TO_P(z, is_ref);            \  //5.4新增宏
        Z_SET_REFCOUNT_P(z, refcount);          \
    }</p>
<div class="highlight"><pre><code class="text">#define ZVAL_COPY_VALUE(z, v)               \
    do {                                    \
        (z)-&gt;value = (v)-&gt;value;            \
        Z_TYPE_P(z) = Z_TYPE_P(v);          \
    } while (0)
</code></pre></div><div class="highlight"><pre><code class="text">## 1.4 zval之返回值

在扩展中, 返回值实际上就是return\_value,这个变量可以将PHP\_FUNCTION宏站开看到. 也就是说, 处理返回值其实就是将需要返回的数据赋值给return\_value, PHP也已经封装好了相关处理的宏.

``` c return zval
    #define RETVAL_RESOURCE(l)              ZVAL_RESOURCE(return_value, l)
    #define RETVAL_BOOL(b)                  ZVAL_BOOL(return_value, b)
    #define RETVAL_NULL()                   ZVAL_NULL(return_value)
    #define RETVAL_LONG(l)                  ZVAL_LONG(return_value, l)
    #define RETVAL_DOUBLE(d)                ZVAL_DOUBLE(return_value, d)
    #define RETVAL_STRING(s, duplicate)         ZVAL_STRING(return_value, s, duplicate)
    #define RETVAL_STRINGL(s, l, duplicate)     ZVAL_STRINGL(return_value, s, l, duplicate)
    #define RETVAL_EMPTY_STRING()           ZVAL_EMPTY_STRING(return_value)
    #define RETVAL_ZVAL(zv, copy, dtor)     ZVAL_ZVAL(return_value, zv, copy, dtor)
    #define RETVAL_FALSE                    ZVAL_BOOL(return_value, 0)
    #define RETVAL_TRUE                     ZVAL_BOOL(return_value, 1)

    #define RETURN_RESOURCE(l)              { RETVAL_RESOURCE(l); return; }
    #define RETURN_BOOL(b)                  { RETVAL_BOOL(b); return; }
    #define RETURN_NULL()                   { RETVAL_NULL(); return;}
    #define RETURN_LONG(l)                  { RETVAL_LONG(l); return; }
    #define RETURN_DOUBLE(d)                { RETVAL_DOUBLE(d); return; }
    #define RETURN_STRING(s, duplicate)     { RETVAL_STRING(s, duplicate); return; }
    #define RETURN_STRINGL(s, l, duplicate) { RETVAL_STRINGL(s, l, duplicate); return; }
    #define RETURN_EMPTY_STRING()           { RETVAL_EMPTY_STRING(); return; }
    #define RETURN_ZVAL(zv, copy, dtor)     { RETVAL_ZVAL(zv, copy, dtor); return; }
    #define RETURN_FALSE                    { RETVAL_FALSE; return; }
    #define RETURN_TRUE                     { RETVAL_TRUE; return; }
</code></pre></div>
<h2 id="toc_5">1.5 zval之创建</h2>

<p>在zend.h中可以看到, 可以这样为zval *类型变量分配内存并初始化</p>

<p>``` c create zval</p>
<div class="highlight"><pre><code class="text">#define MAKE_STD_ZVAL(zv)   \
    ALLOC_ZVAL(zv);         \
    INIT_PZVAL(zv);

#define ALLOC_ZVAL(z)       \
    (z) = (zval *) emalloc(sizeof(zval))

#define INIT_PZVAL(z)       \
    (z)-&gt;refcount__gc = 1;  \
    (z)-&gt;is_ref__gc = 0;
</code></pre></div><div class="highlight"><pre><code class="text">这里通过emalloc为zval* 变量分配了空间, 但只初始化了引用和引用计数, 具体类型和值需要再进行对应的初始化

也可以对一个已分配空间的zval变量进行初始化, 这里会将类型置为NULL

``` c init zval

    #define INIT_ZVAL(z) z = zval_used_for_init;

    extern ZEND_API zval zval_used_for_init;  //zval.h
    ZEND_API zval zval_used_for_init; /* True global variable */  // zval.c
</code></pre></div>
<p>可以看到，这个初始化是通过全局变量赋值进行的，而这个全局变量由Zend在启动时进行初始化</p>
<div class="highlight"><pre><code class="c">    <span class="n">Z_UNSET_ISREF</span><span class="p">(</span><span class="n">zval_used_for_init</span><span class="p">);</span>   <span class="c1">// 5.4</span>
    <span class="n">Z_SET_REFCOUNT</span><span class="p">(</span><span class="n">zval_used_for_init</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">Z_TYPE</span><span class="p">(</span><span class="n">zval_used_for_init</span><span class="p">)</span> <span class="o">=</span> <span class="n">IS_NULL</span><span class="p">;</span>
</code></pre></div>
<h2 id="toc_6">1.6 zval之类型转换</h2>

<p>编写扩展时, 如果需要转换变量的类型，可以使用下面的宏处理(见zend_operators.h)</p>

<p><code>c type convertion
    ZEND_API void convert_scalar_to_number(zval *op TSRMLS_DC);
    ZEND_API void _convert_to_string(zval *op ZEND_FILE_LINE_DC);
    ZEND_API void convert_to_long(zval *op);
    ZEND_API void convert_to_double(zval *op);
    ZEND_API void convert_to_long_base(zval *op, int base);
    ZEND_API void convert_to_null(zval *op);
    ZEND_API void convert_to_boolean(zval *op);
    ZEND_API void convert_to_array(zval *op);
    ZEND_API void convert_to_object(zval *op);
    ZEND_API void multi_convert_to_long_ex(int argc, …);
    ZEND_API void multi_convert_to_double_ex(int argc, …);
    ZEND_API void multi_convert_to_string_ex(int argc, …);
    ZEND_API int add_char_to_string(zval *result, zval *op1, zval *op2);
    ZEND_API int add_string_to_string(zval *result, zval *op1, zval *op2);
    #define convert_to_string(op) if ((op)-&gt;type != IS_STRING) { _convert_to_string((op) ZEND_FILE_LINE_CC); }
</code></p>

<p>上面的操作可以将zval *所指向的变量转换为相应的类型,
但如果不希望影响原有变量类型，可以通过下面的宏处理, 在类型转换时进行copy_on_write</p>

<p>``` c safe type convertion 
    #define convert_to_boolean_ex(ppzv) convert_to_ex_master(ppzv, boolean, BOOL)
    #define convert_to_long_ex(ppzv)    convert_to_ex_master(ppzv, long, LONG)
    #define convert_to_double_ex(ppzv)  convert_to_ex_master(ppzv, double, DOUBLE)
    #define convert_to_string_ex(ppzv)  convert_to_ex_master(ppzv, string, STRING)
    #define convert_to_array_ex(ppzv)   convert_to_ex_master(ppzv, array, ARRAY)
    #define convert_to_object_ex(ppzv)  convert_to_ex_master(ppzv, object, OBJECT)
    #define convert_to_null_ex(ppzv)    convert_to_ex_master(ppzv, null, NULL)
    #define convert_scalar_to_number_ex(ppzv)                           \<br>
        if (Z_TYPE_PP(ppzv)!=IS_LONG &amp;&amp; Z_TYPE_PP(ppzv)!=IS_DOUBLE) {   \<br>
            if (!Z_ISREF_PP(ppzv)) {                                    \<br>
                SEPARATE_ZVAL(ppzv);                                    \<br>
            }                                                           \<br>
            convert_scalar_to_number(*ppzv TSRMLS_CC);                  \<br>
        } </p>
<div class="highlight"><pre><code class="text">#define convert_to_ex_master(ppzv, lower_type, upper_type)      \
    if ((*ppzv)-&gt;type!=IS_##upper_type) {                       \
        SEPARATE_ZVAL_IF_NOT_REF(ppzv);                         \
        convert_to_##lower_type(*ppzv);                         \
    }
</code></pre></div><div class="highlight"><pre><code class="text">## 1.7 zval之参数传递

编写扩展时, 可以通过zend_parse_parameters获取PHP传递给扩展的参数

``` c paramaters

    zval *pind, **val;
    long opt;

    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &quot;rlZ&quot;, &amp;pind, &amp;opt, &amp;val) == FAILURE) {
        return;
    } 
    // something to do...
</code></pre></div>
<p><em>本文地址: <a href=http://www.vneptune.com/blog/php-zval/> <a href="http://www.vneptune.com/blog/php-zval/">http://www.vneptune.com/blog/php-zval/</a></a></em></p>

<p><em>转载请注明出处</em></p>
]]></content>
  </entry>
  
</feed>
